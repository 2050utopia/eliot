// Code generated by protoc-gen-go.
// source: services/node/v1/node.proto
// DO NOT EDIT!

/*
Package node is a generated protocol buffer package.

It is generated from these files:
	services/node/v1/node.proto

It has these top-level messages:
	InfoRequest
	InfoResponse
	Info
	Label
*/
package node

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InfoRequest struct {
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type InfoResponse struct {
	Info *Info `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *InfoResponse) Reset()                    { *m = InfoResponse{} }
func (m *InfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()               {}
func (*InfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InfoResponse) GetInfo() *Info {
	if m != nil {
		return m.Info
	}
	return nil
}

type Info struct {
	// Labels for the node
	Labels []*Label `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty"`
	// Node hostname
	Hostname string `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	// IP addresses
	Addresses []string `protobuf:"bytes,3,rep,name=addresses" json:"addresses,omitempty"`
	// Port
	GrpcPort int64 `protobuf:"varint,4,opt,name=grpcPort" json:"grpcPort,omitempty"`
	// The machine id is an ID identifying a specific Linux/Unix installation.
	// It does not change if hardware is replaced.
	MachineID string `protobuf:"bytes,5,opt,name=machineID" json:"machineID,omitempty"`
	// The system uuid is the main board product UUID,
	// as set by the board manufacturer and encoded in the BIOS DMI information
	SystemUUID string `protobuf:"bytes,6,opt,name=systemUUID" json:"systemUUID,omitempty"`
	// A random ID that is regenerated on each boot
	BootID string `protobuf:"bytes,7,opt,name=bootID" json:"bootID,omitempty"`
	// Node operating system. One of 386, amd64, arm, s390x, and so on.
	Arch string `protobuf:"bytes,8,opt,name=arch" json:"arch,omitempty"`
	// node operating system. One of darwin, freebsd, linux, windows, and so on
	Os string `protobuf:"bytes,9,opt,name=os" json:"os,omitempty"`
	// Server version
	Version string `protobuf:"bytes,10,opt,name=version" json:"version,omitempty"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Info) GetLabels() []*Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Info) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Info) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Info) GetGrpcPort() int64 {
	if m != nil {
		return m.GrpcPort
	}
	return 0
}

func (m *Info) GetMachineID() string {
	if m != nil {
		return m.MachineID
	}
	return ""
}

func (m *Info) GetSystemUUID() string {
	if m != nil {
		return m.SystemUUID
	}
	return ""
}

func (m *Info) GetBootID() string {
	if m != nil {
		return m.BootID
	}
	return ""
}

func (m *Info) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *Info) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *Info) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type Label struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Label) Reset()                    { *m = Label{} }
func (m *Label) String() string            { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()               {}
func (*Label) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Label) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Label) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*InfoRequest)(nil), "eliot.services.containers.v1.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "eliot.services.containers.v1.InfoResponse")
	proto.RegisterType((*Info)(nil), "eliot.services.containers.v1.Info")
	proto.RegisterType((*Label)(nil), "eliot.services.containers.v1.Label")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := grpc.Invoke(ctx, "/eliot.services.containers.v1.Node/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eliot.services.containers.v1.Node/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eliot.services.containers.v1.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Node_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/node/v1/node.proto",
}

func init() { proto.RegisterFile("services/node/v1/node.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0x45, 0x96, 0xec, 0x44, 0xe3, 0xb6, 0x94, 0xa5, 0x94, 0x25, 0x0d, 0x45, 0xa8, 0x17, 0xb5,
	0x07, 0x2d, 0x71, 0xa1, 0xa5, 0xe4, 0x56, 0x4c, 0xc1, 0x50, 0x4a, 0x11, 0xe4, 0x52, 0xe8, 0x61,
	0x2d, 0x4f, 0xec, 0x25, 0xd2, 0x8e, 0xba, 0xb3, 0x16, 0xe4, 0xa3, 0xfa, 0x8f, 0x45, 0x2b, 0x3b,
	0x29, 0x39, 0x84, 0x9c, 0x76, 0xde, 0x9b, 0xf7, 0x1e, 0xec, 0xcc, 0xc0, 0x1b, 0x46, 0xd7, 0x9b,
	0x1a, 0x59, 0x59, 0xda, 0xa0, 0xea, 0x2f, 0xc2, 0x5b, 0x76, 0x8e, 0x3c, 0x89, 0x73, 0x6c, 0x0c,
	0xf9, 0xf2, 0x28, 0x29, 0x6b, 0xb2, 0x5e, 0x1b, 0x8b, 0x8e, 0xcb, 0xfe, 0x22, 0x7f, 0x0e, 0xf3,
	0x95, 0xbd, 0xa6, 0x0a, 0xff, 0xec, 0x91, 0x7d, 0xfe, 0x0d, 0x9e, 0x8d, 0x90, 0x3b, 0xb2, 0x8c,
	0xe2, 0x13, 0x24, 0xc6, 0x5e, 0x93, 0x8c, 0xb2, 0xa8, 0x98, 0x2f, 0xf2, 0xf2, 0xb1, 0xac, 0x32,
	0x38, 0x83, 0x3e, 0xff, 0x3b, 0x81, 0x64, 0x80, 0xe2, 0x12, 0x66, 0x8d, 0x5e, 0x63, 0xc3, 0x32,
	0xca, 0xe2, 0x62, 0xbe, 0x78, 0xf7, 0x78, 0xc4, 0xf7, 0x41, 0x5b, 0x1d, 0x2c, 0xe2, 0x0c, 0x4e,
	0x77, 0xc4, 0xde, 0xea, 0x16, 0xe5, 0x24, 0x8b, 0x8a, 0xb4, 0xba, 0xc3, 0xe2, 0x1c, 0x52, 0xbd,
	0xd9, 0x38, 0x64, 0x46, 0x96, 0x71, 0x16, 0x17, 0x69, 0x75, 0x4f, 0x0c, 0xce, 0xad, 0xeb, 0xea,
	0x9f, 0xe4, 0xbc, 0x4c, 0xb2, 0xa8, 0x88, 0xab, 0x3b, 0x3c, 0x38, 0x5b, 0x5d, 0xef, 0x8c, 0xc5,
	0xd5, 0x52, 0x4e, 0x43, 0xec, 0x3d, 0x21, 0xde, 0x02, 0xf0, 0x2d, 0x7b, 0x6c, 0xaf, 0xae, 0x56,
	0x4b, 0x39, 0x0b, 0xed, 0xff, 0x18, 0xf1, 0x1a, 0x66, 0x6b, 0x22, 0xbf, 0x5a, 0xca, 0x93, 0xd0,
	0x3b, 0x20, 0x21, 0x20, 0xd1, 0xae, 0xde, 0xc9, 0xd3, 0xc0, 0x86, 0x5a, 0xbc, 0x80, 0x09, 0xb1,
	0x4c, 0x03, 0x33, 0x21, 0x16, 0x12, 0x4e, 0x7a, 0x74, 0x6c, 0xc8, 0x4a, 0x08, 0xe4, 0x11, 0xe6,
	0x0a, 0xa6, 0xe1, 0xeb, 0xe2, 0x25, 0xc4, 0x37, 0x78, 0x1b, 0xe6, 0x9d, 0x56, 0x43, 0x29, 0x5e,
	0xc1, 0xb4, 0xd7, 0xcd, 0xfe, 0x38, 0x81, 0x11, 0x2c, 0x10, 0x92, 0x1f, 0xb4, 0x41, 0xf1, 0xfb,
	0x30, 0xe7, 0xf7, 0x4f, 0x58, 0xcd, 0xb8, 0xe3, 0xb3, 0x0f, 0x4f, 0x91, 0x8e, 0xfb, 0xff, 0xfa,
	0xe5, 0xd7, 0xe7, 0xad, 0xf1, 0xbb, 0xfd, 0xba, 0xac, 0xa9, 0x55, 0xe8, 0x2c, 0x69, 0xdd, 0x69,
	0x15, 0x02, 0x54, 0x77, 0xb3, 0x55, 0xba, 0x33, 0xea, 0xe1, 0xf5, 0x5d, 0x0e, 0xef, 0x7a, 0x16,
	0xce, 0xef, 0xe3, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05, 0xe3, 0x6a, 0x16, 0x9d, 0x02, 0x00,
	0x00,
}
